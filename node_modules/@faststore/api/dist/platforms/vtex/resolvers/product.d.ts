import type { EnhancedCommercialOffer } from '../utils/enhanceCommercialOffer';
import type { Resolver } from '..';
import type { PromiseType } from '../../../typings';
import type { Query } from './query';
import type { Attachment } from '../clients/commerce/types/OrderForm';
declare type QueryProduct = PromiseType<ReturnType<typeof Query.product>>;
declare type Root = QueryProduct & {
    attachmentsValues?: Attachment[];
};
export declare const StoreProduct: Record<string, Resolver<Root>> & {
    offers: Resolver<Root, any, Array<EnhancedCommercialOffer<Root['sellers'][number], Root>>>;
    isVariantOf: Resolver<Root, any, Root>;
};
export {};
