import type { Context, Options } from '../../index';
import type { SelectedFacet } from '../../utils/facets';
import type { Facet, FacetValueBoolean, FacetSearchResult } from './types/FacetSearchResult';
import type { ProductSearchResult, Suggestion } from './types/ProductSearchResult';
export declare type Sort = 'price:desc' | 'price:asc' | 'orders:desc' | 'name:desc' | 'name:asc' | 'release:desc' | 'discount:desc' | '';
export interface SearchArgs {
    query?: string;
    page: number;
    count: number;
    type: 'product_search' | 'facets';
    sort?: Sort;
    selectedFacets?: SelectedFacet[];
    fuzzy?: '0' | '1' | 'auto';
    hideUnavailableItems?: boolean;
}
export interface ProductLocator {
    field: 'id' | 'slug';
    value: string;
}
export declare const isFacetBoolean: (facet: Facet) => facet is Facet<FacetValueBoolean>;
export declare const IntelligentSearch: ({ account, environment, hideUnavailableItems }: Options, ctx: Context) => {
    facets: (args: Omit<SearchArgs, 'type'>) => Promise<FacetSearchResult>;
    products: (args: Omit<SearchArgs, 'type'>) => Promise<ProductSearchResult>;
    suggestedTerms: (args: Omit<SearchArgs, 'type'>) => Promise<Suggestion>;
    topSearches: () => Promise<Suggestion>;
};
