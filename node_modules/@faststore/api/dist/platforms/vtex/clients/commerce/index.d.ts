import { FACET_CROSS_SELLING_MAP } from '../../utils/facets';
import type { PortalProduct } from './types/Product';
import type { Context, Options } from '../../index';
import type { Brand } from './types/Brand';
import type { CategoryTree } from './types/CategoryTree';
import type { OrderForm, OrderFormInputItem } from './types/OrderForm';
import type { PortalPagetype } from './types/Portal';
import type { Region, RegionInput } from './types/Region';
import type { Simulation, SimulationArgs, SimulationOptions } from './types/Simulation';
import type { Session } from './types/Session';
import type { Channel } from '../../utils/channel';
import type { SalesChannel } from './types/SalesChannel';
declare type ValueOf<T> = T extends Record<string, infer K> ? K : never;
export declare const VtexCommerce: ({ account, environment }: Options, ctx: Context) => {
    catalog: {
        salesChannel: (sc: string) => Promise<SalesChannel>;
        brand: {
            list: () => Promise<Brand[]>;
        };
        category: {
            tree: (depth?: number) => Promise<CategoryTree[]>;
        };
        portal: {
            pagetype: (slug: string) => Promise<PortalPagetype>;
        };
        products: {
            crossselling: ({ type, productId, groupByProduct }: {
                type: ValueOf<typeof FACET_CROSS_SELLING_MAP>;
                productId: string;
                groupByProduct?: boolean | undefined;
            }) => Promise<PortalProduct[]>;
        };
    };
    checkout: {
        simulation: (args: SimulationArgs, { salesChannel }?: SimulationOptions) => Promise<Simulation>;
        orderForm: ({ id, refreshOutdatedData, channel, }: {
            id: string;
            refreshOutdatedData?: boolean | undefined;
            channel?: Required<Channel> | undefined;
        }) => Promise<OrderForm>;
        updateOrderFormItems: ({ id, orderItems, allowOutdatedData, salesChannel, }: {
            id: string;
            orderItems: OrderFormInputItem[];
            allowOutdatedData?: "paymentData" | undefined;
            salesChannel?: string | undefined;
        }) => Promise<OrderForm>;
        setCustomData: ({ id, appId, key, value, }: {
            id: string;
            appId: string;
            key: string;
            value: string;
        }) => Promise<OrderForm>;
        region: ({ postalCode, country, salesChannel, }: RegionInput) => Promise<Region>;
    };
    session: (search: string) => Promise<Session>;
};
export {};
